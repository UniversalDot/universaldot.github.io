"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1755],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=s,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5863:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(7462),s=(r(7294),r(3905));const a={sidebar_position:5},o="Testing",i={unversionedId:"sdk/Testing",id:"sdk/Testing",title:"Testing",description:"To ensure all developed functionality works as intended, tests have been implemented.",source:"@site/docs/sdk/Testing.md",sourceDirName:"sdk",slug:"/sdk/Testing",permalink:"/mk/docs/sdk/Testing",editUrl:"https://github.com/UniversalDot/udot-wiki/tree/master/wiki/docs/sdk/Testing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Docker",permalink:"/mk/docs/sdk/docker"},next:{title:"Contribute to Wiki",permalink:"/mk/docs/tutorial-extras/contribute"}},l={},c=[{value:"Substrate Test",id:"substrate-test",level:2},{value:"Mock Runtime",id:"mock-runtime",level:5},{value:"Writing tests",id:"writing-tests",level:5},{value:"Run tests",id:"run-tests",level:5},{value:"Cypress Testing",id:"cypress-testing",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"testing"},"Testing"),(0,s.kt)("p",null,"To ensure all developed functionality works as intended, tests have been implemented."),(0,s.kt)("h2",{id:"substrate-test"},"Substrate Test"),(0,s.kt)("h5",{id:"mock-runtime"},"Mock Runtime"),(0,s.kt)("p",null,"Pallet test depend on substrate Runtime. To be able to run these pallet test, first we must construct a mock Runtime environment. Mocks for runtime are constructed for each pallet separately and are located in their respective /src/ folder."),(0,s.kt)("h5",{id:"writing-tests"},"Writing tests"),(0,s.kt)("p",null,"Tests are functions, annotated with the #","[test]"," macro. To test specific functionality, we use ",(0,s.kt)("b",null,"assert")," macros to match our expectations with the expected result. There are already several predefine assert macros such as:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"assert_eq!"),(0,s.kt)("li",{parentName:"ul"},"assert_ok!"),(0,s.kt)("li",{parentName:"ul"},"assert_noop!")),(0,s.kt)("p",null,"For more information on how to create tests, refer to the following ",(0,s.kt)("a",{parentName:"p",href:"https://docs.substrate.io/how-to-guides/v3/testing/basics/"},"link"),". "),(0,s.kt)("h5",{id:"run-tests"},"Run tests"),(0,s.kt)("p",null,"To run test each pallet, simply navigate to the ",(0,s.kt)("inlineCode",{parentName:"p"},"pallets")," folder in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/UniversalDot/universal-dot-node"},"universal-dot-node")," repository and run the following command: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cargo test\n")),(0,s.kt)("p",null,"To run benchmark tests for each pallet, simply run at pallet root: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cargo test --features runtime-benchmarks\n")),(0,s.kt)("h2",{id:"cypress-testing"},"Cypress Testing"),(0,s.kt)("p",null,"TO DO"))}p.isMDXComponent=!0}}]);